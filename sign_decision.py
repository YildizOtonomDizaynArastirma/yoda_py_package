#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Imu
from std_msgs.msg import Bool 
from std_msgs.msg import Float32
from std_msgs.msg import Int32 
import time
import math

class SignDecision(Node):   

    def __init__(self):    
        super().__init__("sign_decision_node")
        
        self.sign_ID = 'id_topic'  # Yolodan gelecek olan tabela verileri iÃ§in topic adÄ±.
        self.imu_rate = '/yoda/imu/data' #imu verilerinin topiÄŸi.
        #self.traffic_sign = '' #trafik iÅŸaretinin topiÄŸi
        self.decision = None  # Tabela kararÄ±nÄ± tutmak iÃ§in
        self.initial_linear_velocity = 0.5  # BaÅŸlangÄ±Ã§ hÄ±zÄ±
        self.angular_velocity = 0.3  # AÃ§Ä±sal hÄ±z
        self.turning_linear_velocity = 0.5  # DÃ¶nÃ¼ÅŸ sÄ±rasÄ±ndaki lineer hÄ±z artÄ±rÄ±ldÄ±
        self.max_turn_angle = 90  # Maksimum dÃ¶nÃ¼ÅŸ aÃ§Ä±sÄ±
        self.yaw_angle = 0.0  # Mevcut yaw aÃ§Ä±sÄ±
        self.initial_yaw = None  # DÃ¶nÃ¼ÅŸe baÅŸlamadan Ã¶nceki aÃ§Ä±
        self.is_turning = False  # DÃ¶nÃ¼ÅŸ durumunu takip etmek iÃ§in flag
        self.turn_complete = False  # DÃ¶nÃ¼ÅŸÃ¼n tamamlandÄ±ÄŸÄ±nÄ± takip etmek iÃ§in flag
        
        self.traffic_light_id = None


        # Subscription'lar
        self.sign_subscription = self.create_subscription(
            Float32,
            self.sign_ID,
            self.sign_ID_listener_callback,
            10)
        
        #Bu kÄ±sÄ±m dÃ¼zeltilecek!!!!!
        self.create_subscription(
            Int32, 
            '/traffic_light_id', 
            self.traffic_light_callback, 
            10)

        self.publisher_ = self.create_publisher(Twist, '/yoda/cmd_vel', 10)


        self.maneuver_pub = self.create_publisher(Bool, '/start_maneuver', 10)    #Durak ile ilgili
        self.park_pub = self.create_publisher(Bool, '/start_parking', 10)       #park ile ilgili
        

        self.imu_subscription = self.create_subscription(
            Imu,                   
            self.imu_rate,
            self.imu_listener_callback,
            10)
        
        
        self.timer = self.create_timer(0.5, self.timer_callback)
        
        # BaÅŸlangÄ±Ã§ta hareket et
        self.start_moving()
    
    #Durak iÃ§in
    def maneuver_for_station(self):
        msg = Bool()
        msg.data = True
        self.maneuver_pub.publish(msg)
        
    #Park iÃ§in
    def start_parking(self):
        msg = Bool()
        msg.data = True
        self.park_pub.publish(msg)


    #Trafik iÅŸareti iÃ§in
    def traffic_light_callback(self, msg):
        self.traffic_light_id = msg.data
        self.get_logger().info(f"Trafik Ä±ÅŸÄ±ÄŸÄ± algÄ±landÄ±: {self.traffic_light_id}")


    def start_moving(self):
        """BaÅŸlangÄ±Ã§ta aracÄ± ileri hareket ettirir."""
        start_msg = Twist()
        start_msg.linear.x = self.initial_linear_velocity  
        start_msg.angular.z = 0.0
        self.publisher_.publish(start_msg)
        self.get_logger().info(f"AraÃ§ {self.initial_linear_velocity} hÄ±zla ileri gidiyor")

    def sign_ID_listener_callback(self, msg):
        """Tabela ID verisi geldiÄŸinde Ã§aÄŸrÄ±lÄ±r."""
        self.get_logger().info(f'Alinan veri: {msg.data}')     
        self.decision = msg.data
        # Karar verme iÅŸlemini baÅŸlat
        self.decision_part()

    def imu_listener_callback(self, msg):
        """IMU'dan gelen aÃ§Ä±sal verileri iÅŸler."""
        # imudan alÄ±nan Quaternion deÄŸerleri kullanarak yaw aÃ§Ä±sÄ±nÄ± hesapladÄ±k.
        q = msg.orientation
        siny_cosp = 2 * (q.w * q.z + q.x * q.y)
        cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z)
        current_yaw = math.atan2(siny_cosp, cosy_cosp) * (180 / math.pi)  # Dereceye Ã§evir
        
        # AÃ§Ä±yÄ± -180 ile 180 arasÄ±nda tutarak hatalÄ± dÃ¶nÃ¼ÅŸler yapmasÄ±nÄ± Ã¶nledik. Bunu yukarÄ±dak hesaplamalarla yaptÄ±k
        self.yaw_angle = current_yaw
        
        # IMU verisi debug iÃ§in loglama
        if self.is_turning:
            self.get_logger().info(f"Yaw: {self.yaw_angle:.2f}, BaÅŸlangÄ±Ã§: {self.initial_yaw:.2f}")



    def timer_callback(self):
        """DÃ¶nÃ¼ÅŸ durumunu dÃ¼zenli olarak kontrol eder."""
        #initial_yaw imu verisi geldiÄŸinde none olmaktan Ã§Ä±kar. Yani imu_listener_callback.te deÄŸiÅŸir.
        if self.is_turning and self.initial_yaw is not None: 
            # BaÅŸlangÄ±Ã§ aÃ§Ä±sÄ±ndan farkÄ± hesapla
            angle_diff = self.calculate_angle_diff(self.initial_yaw, self.yaw_angle)
            
            # dÃ¶nÃ¼ÅŸ aÃ§Ä±sÄ± farkÄ±nÄ± logluyoruz.
            self.get_logger().info(f"DÃ¶nÃ¼ÅŸ: {angle_diff:.2f} derece, Hedef: 90 derece")
            
            if angle_diff >= 85:  # 90 derece yerine biraz tolerans bÄ±raktÄ±k
                # DÃ¶nÃ¼ÅŸÃ¼ durdur ve dÃ¼z hareket etmeye baÅŸla
                self.get_logger().info("DÃ¶nÃ¼ÅŸ tamamlandÄ±! DÃ¼z harekete geÃ§iliyor.")
                self.is_turning = False
                self.turn_complete = True
                
                # DÃ¼z harekete geÃ§ir
                straight_msg = Twist()
                straight_msg.linear.x = self.initial_linear_velocity
                straight_msg.angular.z = 0.0
                self.publisher_.publish(straight_msg)
    
    def calculate_angle_diff(self, start_angle, current_angle):
        """Ä°ki aÃ§Ä± arasÄ±ndaki farkÄ± hesaplar (sola dÃ¶nÃ¼ÅŸ iÃ§in pozitif)."""
        diff = current_angle - start_angle
        
        # 180 derece sÄ±nÄ±rÄ±nÄ± aÅŸma durumlarÄ±nÄ± dÃ¼zelt
        if diff < -180:
            diff += 360
        elif diff > 180:
            diff -= 360
            
        # Sola dÃ¶nÃ¼ÅŸ iÃ§in mutlak deÄŸeri al (pozitif olmalÄ±) 
        #Bunu pozitif olarak alÄ±yoruz sonrasÄ±nda saÄŸa dÃ¶nÃ¼ÅŸ iÃ§in direkt eksi koyarak ayarladÄ±k.
        #Daha sonrasÄ±nda bu farkÄ± timer_callback'e gÃ¶nderdik ve angle_diff.e atadÄ±k.
        return abs(diff)

    def decision_part(self):
        """Tabela ID'sine gÃ¶re karar verir ve uygun eylemi baÅŸlatÄ±r."""
        if self.decision == 0.0:
            self.get_logger().info("duz devam et")
            self.start_moving()


        elif self.decision == 1.0:
            self.get_logger().info("dur")
            self.stop_moving()

            
        elif self.decision == 2.0:
            self.get_logger().info("sola mecburi yon")
            self.turn_left()

            
        elif self.decision == 3.0:
            self.get_logger().info("saga mecburi yon")
            self.turn_right()
        
        
        elif self.decision == 4.0:
            self.get_logger().info("ileri ve sola mecburi yon")
            call = 1   # Sola dÃ¶nÃ¼ÅŸ iÃ§in 1, dÃ¼z devam etmek iÃ§in 0 girilecek.

            if call == 1:
                self.turn_left()
            elif call == 0:
                self.get_logger().info("duz devam et")


        elif self.decision == 5.0:
            self.get_logger().info("ileri ve saga mecburi yon")
            call = 1  # SaÄŸa dÃ¶nÃ¼ÅŸ iÃ§in 1, dÃ¼z devam etmek iÃ§in 0 girilecek.

            if call == 1:
                self.turn_right()
            elif call == 0:
                self.get_logger().info("duz devam et")


        elif self.decision == 6.0:
            if self.traffic_light_id == 0:
                self.get_logger().info("ğŸ”´ KÄ±rmÄ±zÄ± Ä±ÅŸÄ±k â€“ DUR")
                self.stop_moving()
            elif self.traffic_light_id == 1:
                self.get_logger().info("ğŸŸ¢ YeÅŸil Ä±ÅŸÄ±k â€“ HAREKET ET")
                self.start_moving()          
                
        elif self.decision == 7.0:
            self.get_logger().info("Durak")
            self.maneuver_for_station()

        elif self.decision == 8.0:
            self.get_logger().info("park et")
            self.start_parking()
    

        else:
            self.get_logger().info(f"TanÄ±mlanmamÄ±ÅŸ karar kodu: {self.decision}")



    def turn_left(self):
        """AracÄ± sola 90 derece dÃ¶ndÃ¼rÃ¼r."""
        if self.is_turning:
            self.get_logger().info("Zaten dÃ¶nÃ¼ÅŸ yapÄ±lÄ±yor, bu komut atlandÄ±.")
            return
            
        self.get_logger().info("AraÃ§ sola dÃ¶nmeye baÅŸlÄ±yor...")
        
        # DÃ¶nÃ¼ÅŸ Ã¶ncesi mevcut aÃ§Ä±yÄ± kaydet
        self.initial_yaw = self.yaw_angle
        self.is_turning = True
        self.turn_complete = False
        
        # Ã–NEMLI: Net ve gÃ¼Ã§lÃ¼ bir dÃ¶nÃ¼ÅŸ komutu gÃ¶nder
        turn_msg = Twist()
        turn_msg.linear.x = self.turning_linear_velocity  # DÃ¶nÃ¼ÅŸ sÄ±rasÄ±nda 0.5 hÄ±zla ilerle
        turn_msg.angular.z = self.angular_velocity  # Pozitif deÄŸer (sola dÃ¶nÃ¼ÅŸ)
        
        # Komutu birkaÃ§ kez gÃ¶nder (gÃ¼vence iÃ§in)
        for _ in range(3):
            self.publisher_.publish(turn_msg)
            time.sleep(0.1)
        
        self.get_logger().info(f"DÃ¶nÃ¼ÅŸ komutu gÃ¶nderildi! Linear.x: {turn_msg.linear.x}, Angular.z: {turn_msg.angular.z}")
        

    def turn_right(self):
        """AracÄ± sola 90 derece dÃ¶ndÃ¼rÃ¼r."""
        if self.is_turning:
            self.get_logger().info("Zaten dÃ¶nÃ¼ÅŸ yapÄ±lÄ±yor, bu komut atlandÄ±.")
            return
            
        self.get_logger().info("AraÃ§ saÄŸa dÃ¶nmeye baÅŸlÄ±yor...")
        
        # DÃ¶nÃ¼ÅŸ Ã¶ncesi mevcut aÃ§Ä±yÄ± kaydet
        self.initial_yaw = self.yaw_angle
        self.is_turning = True
        self.turn_complete = False
        
        # Ã–NEMLI: Net ve gÃ¼Ã§lÃ¼ bir dÃ¶nÃ¼ÅŸ komutu gÃ¶nder
        turn_msg = Twist()
        turn_msg.linear.x = self.turning_linear_velocity  # DÃ¶nÃ¼ÅŸ sÄ±rasÄ±nda 0.5 hÄ±zla ilerle
        turn_msg.angular.z = -self.angular_velocity  # negatif deÄŸer (saÄŸa dÃ¶nÃ¼ÅŸ)
        
        # Komutu birkaÃ§ kez gÃ¶nder (gÃ¼vence iÃ§in)
        for _ in range(3):
            self.publisher_.publish(turn_msg)
            time.sleep(0.1)
        
        self.get_logger().info(f"DÃ¶nÃ¼ÅŸ komutu gÃ¶nderildi! Linear.x: {turn_msg.linear.x}, Angular.z: {turn_msg.angular.z}")


    def stop_moving(self):
        stop_msg = Twist()
        stop_msg.linear.x = 0.0
        stop_msg.angular.z = 0.0
        self.publisher_.publish(stop_msg)

def main(args=None):
    rclpy.init(args=args) 
    node = SignDecision()   
    rclpy.spin(node) 
    node.destroy_node()
    rclpy.shutdown() 


if __name__ == "__main__":
    main()
